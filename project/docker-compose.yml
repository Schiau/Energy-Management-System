version: '3.8'

services:

  reverse-proxy:
    image: traefik:v3.2
    command: 
      - --api.insecure=true 
      - --providers.docker
      - --accesslog=true
      - --accesslog.filepath=/var/log/traefik/access.log
      - --log.level=DEBUG
      - --entrypoints.web.address=:80
    ports:
      - "80:80"    
      - "8085:8080"  
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - traefik_logs:/var/log/traefik
    networks:
      - spring-react-network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"  # AMQP connection port
      - "15672:15672"  # Management UI
    networks:
      - spring-react-network

  # PostgreSQL Database for Microservice 1
  postgres-db1:
    restart: always
    image: postgres:13
    container_name: postgres-db1
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: app1
    ports:
      - "5433:5432"  
    networks:
      - spring-react-network
    volumes:
      - postgres-data1:/var/lib/postgresql/data

  # PostgreSQL Database for Microservice 2
  postgres-db2:
    restart: always
    image: postgres:13
    container_name: postgres-db2
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: app2
    ports:
      - "5434:5432" 
    networks:
      - spring-react-network
    volumes:
      - postgres-data2:/var/lib/postgresql/data

  # PostgreSQL Database for Microservice 3
  postgres-db3:
    restart: always
    image: postgres:13
    container_name: postgres-db3
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: app3
    ports:
      - "5435:5432" 
    networks:
      - spring-react-network
    volumes:
      - postgres-data3:/var/lib/postgresql/data

  # Spring Boot Microservice 1 (User Service)
  microservice1:
    restart: always
    build:
      context: ./users 
      dockerfile: Dockerfile
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-db1:5432/app1
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: admin
    deploy:
      replicas: 2
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.microservice1.rule=Host(`microservice1.localhost`)"
      - "traefik.http.services.microservice1.loadbalancer.server.port=8080"
    networks:
      - spring-react-network

  # Spring Boot Microservice 2 (Devices Service)
  microservice2:
    restart: always
    build:
      context: ./devices  
      dockerfile: Dockerfile
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-db2:5432/app2
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: admin
      RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest
    deploy:
      replicas: 2
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.microservice2.rule=Host(`microservice2.localhost`)"
      - "traefik.http.services.microservice2.loadbalancer.server.port=8081"
    networks:
      - spring-react-network

  microservice3:
    restart: always
    build:
      context: ./measurement  
      dockerfile: Dockerfile
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-db3:5432/app3
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: admin
      RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest
    deploy:
      replicas: 1
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.microservice3.rule=Host(`microservice3.localhost`)"
      - "traefik.http.services.microservice3.loadbalancer.server.port=8082"
    networks:
      - spring-react-network

  # React Frontend
  react-app:
    build:
      context: ./Frontend 
      dockerfile: Dockerfile
    ports:
      - "3000:80"  # Expose port for React app
    networks:
      - spring-react-network

networks:
  spring-react-network:
    driver: bridge

volumes:
  postgres-data1:
  postgres-data2:
  postgres-data3:
  traefik_logs: